name: CI Pipeline

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🛠 Setup Biome
        uses: biomejs/setup-biome@v2
        with:
          version: latest

      - name: 🔍 Run Biome Linter
        run: |
          echo "::group::Running Biome Linter"
          npm run lint
          echo "::endgroup::"

  test:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: 📦 Install Dependencies
        run: |
          echo "::group::Installing Dependencies"
          npm ci
          echo "::endgroup::"

      - name: 🔄 Generate Prisma Client
        run: |
          echo "::group::Generating Prisma Client"
          npm run prisma:generate
          echo "::endgroup::"

      - name: 🧪 Run Tests
        run: |
          echo "::group::Running Tests"
          npm run test
          echo "::endgroup::"

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: 📦 Install Dependencies
        run: |
          echo "::group::Installing Dependencies"
          npm ci
          echo "::endgroup::"

      - name: 🏗️ Build Project
        run: |
          echo "::group::Building Project"
          npm run build
          echo "::endgroup::"

  build-docker-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: 🔑 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Build Docker Image
        run: |
          echo "::group::Building Docker Image"
          docker build . --file Dockerfile --tag ghcr.io/${{ github.repository }}:${{ github.sha }}
          docker tag ghcr.io/${{ github.repository }}:${{ github.sha }} ghcr.io/${{ github.repository }}:latest
          echo "::endgroup::"

      - name: 📤 Push Docker Image
        run: |
          echo "::group::Pushing Docker Image to GHCR"
          docker push ghcr.io/${{ github.repository }}:${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}:latest
          echo "::endgroup::"

  deploy-image-staging:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - uses: actions/checkout@v4

      - name: 🔑 Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: 🔑 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📂 Copy docker-compose-staging.yml to VPS
        run: |
          echo "::group::📂 Copying docker-compose file to VPS"
          scp -o StrictHostKeyChecking=no ./docker-compose-staging.yml ${{ secrets.SERVER }}:/home/ubuntu/staging/docker-compose-staging.yml
          echo "::endgroup::"

      - name: 🚀 Deploy to Staging
        run: |
          echo "================================="
          echo "🚀 Deploying Staging Environment"
          echo "================================="
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -t ${{ secrets.SERVER }} << 'EOF'
          set -e
          echo "🔑 Logging in to GHCR inside VPS..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "⛔ Stopping existing containers..."
          docker-compose -f /home/ubuntu/staging/docker-compose-staging.yml down || true
          
          echo "⬇️ Pulling latest image..."
          docker pull ghcr.io/${{ github.repository }}:latest
          
          echo "🚀 Starting new containers..."
          docker-compose -f /home/ubuntu/staging/docker-compose-staging.yml up -d --force-recreate
          EOF
          echo "✅ Staging Deployment Completed!"

deploy-image-production:
    runs-on: ubuntu-latest
    needs: deploy-image-staging
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: 🔑 Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: 🔑 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ⛔ Stop Staging Containers
        run: |
          echo "::group::⛔ Stopping Staging Containers"
          ssh -o StrictHostKeyChecking=no -t ${{ secrets.SERVER }} << 'EOF'
          docker-compose -f /home/ubuntu/staging/docker-compose-staging.yml down || true
          EOF
          echo "::endgroup::"

      - name: 📂 Copy docker-compose-production.yml to VPS
        run: |
          echo "::group::📂 Copying docker-compose file to VPS"
          scp -o StrictHostKeyChecking=no ./docker-compose-production.yml ${{ secrets.SERVER }}:/home/ubuntu/production/docker-compose-production.yml
          echo "::endgroup::"

      - name: 🚀 Deploy to Production
        run: |
          echo "================================="
          echo "🚀 Deploying Production Environment"
          echo "================================="
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -t ${{ secrets.SERVER }} << 'EOF'
          set -e
          echo "🔑 Logging in to GHCR inside VPS..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "⛔ Stopping existing production containers..."
          docker-compose -f /home/ubuntu/production/docker-compose-production.yml down || true
          
          echo "⬇️ Pulling latest image..."
          docker pull ghcr.io/${{ github.repository }}:latest
          
          echo "🚀 Starting new production containers..."
          docker-compose -f /home/ubuntu/production/docker-compose-production.yml up -d --force-recreate
          EOF
          echo "✅ Production Deployment Completed!"

